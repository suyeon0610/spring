package com.spring.mvc.board.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.spring.mvc.board.commons.PageCreator;
import com.spring.mvc.board.commons.PageVO;
import com.spring.mvc.board.model.BoardVO;
import com.spring.mvc.board.service.IBoardService;

@Controller
@RequestMapping("/board")
public class BoardController {

	@Autowired
	private IBoardService service;
	
	@GetMapping("/write")
	public void write() {
		System.out.println("/board/write: GET");
	}
	
	@PostMapping("/write")
	public String write(BoardVO article, RedirectAttributes ra) {
		System.out.println("/board/write: POST");
		service.insert(article);
		return "redirect:/board/list";
	}
	
	//페이징 처리 이후 게시글 목록 불러오기 요청
	@GetMapping("/list")
	public String list(PageVO paging, Model model, String keyword, String condition) {
		System.out.println("/board/list: GET");
		System.out.println("페이지 번호: " + paging.getPage());
		
		List<BoardVO> list = service.getArticleList(paging, keyword, condition); //countPerPage만큼 가져옴
		System.out.println("페이징 처리 후 게시물 수: " + list.size());		
		
		PageCreator pc = new PageCreator();
		pc.setPaging(paging);
		pc.setArticleTotalCount(service.countArticles());
		
		model.addAttribute("articles", list);
		model.addAttribute("pc", pc);
	
		return "board/list";
	}
	
	/*
	@GetMapping("/list")
	public void list(Model model) {
		System.out.println("/board/list: GET");
		model.addAttribute("articles", service.getArticleList());
	}
	*/
	
	@GetMapping("/content/{boardNo}")
	//@pathVariable은 URL경로에 변수를 포함시켜 주는 방식
	//null이나 공백이 들어갈 수 있는 파라미터값이라면 적용하지 않는 것을 추천
	//파라미터값에 .이 포함되어 있으면 .뒤의 값은 잘림
	//{} 안에 변수명을 지어주고, @PathVariable 괄호 안에 영억을 지목해서 값을 
	public String content(@PathVariable int boardNo, Model model, @ModelAttribute("paging") PageVO paging) {
		System.out.println("/board/content: GET");
		model.addAttribute("article", service.getArticle(boardNo));
		return "board/content";
	}
	
	//게시글 수정 화면 요청
	@GetMapping("/modify")
	public void modify(@RequestParam("boardNo") int boardNo, Model model, @ModelAttribute("paging") PageVO paging) {
		System.out.println("/board/modify: GET");
		model.addAttribute("article", service.getArticle(boardNo));
	}
	
	@PostMapping("/modify")
	public String modify(BoardVO article, @ModelAttribute("paging") PageVO paging) {
		System.out.println("/board/modify: POST");
		service.update(article);
		return "redirect:/board/content/" + article.getBoardNo() + "?page=" + paging.getPage() + "&countPerPaging=" + paging.getCountPerPage();
	}
	
	@PostMapping("/delete")
	public String delete(int boardNo, @ModelAttribute("paging") PageVO paging) {
		System.out.println("/board/delete: POST");
		service.delete(boardNo);
		return "redirect:/board/list?page=" + paging.getPage() + "&countPerPage=" + paging.getCountPerPage();
	}
}
